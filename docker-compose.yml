version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      - kafka1
    env_file:
      - .env

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "user_validations:1:1"
    depends_on:
      - zookeeper
    networks:
      - kafka1

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka1

  web:
    build: .
    # entrypoint: ["/app/entrypoint.sh"]
    # command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    command: bash -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - kafka
      - zookeeper
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST: ${DATABASE_HOST}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - kafka1
    env_file:
      - .env

  consumer:
    build: .
    # entrypoint: ["/app/entrypoint.sh"]
    # command: bash -c "python manage.py migrate && python manage.py runconsumer"
    command: bash -c "python manage.py runconsumer"
    volumes:
      - .:/app
    depends_on:
      - db
      - kafka
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST: ${DATABASE_HOST}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - kafka1
    env_file:
      - .env

  producer:
    build: .
    # entrypoint: ["/app/entrypoint.sh"]
    # command: bash -c "python manage.py migrate && python manage.py runproducer"
    command: bash -c "python manage.py runproducer"
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST: ${DATABASE_HOST}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - kafka1
    env_file:
      - .env

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - kafka1
    env_file:
      - .env

  faust_worker:
    build: .
    command: faust -A users.faust_app worker -l info
    volumes:
      - .:/app
    depends_on:
      - kafka
      - zookeeper
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST: ${DATABASE_HOST}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - kafka1
    env_file:
      - .env

networks:
  kafka1:
volumes:
  postgres_data:
